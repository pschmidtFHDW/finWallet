{"ast":null,"code":"import { ɵgetAllInstancesOf, ɵisMessagingSupportedFactory, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, APP_INITIALIZER, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { deleteToken as deleteToken$1, getMessaging as getMessaging$1, getToken as getToken$1, onMessage as onMessage$1 } from 'firebase/messaging';\nexport * from 'firebase/messaging';\n\nclass Messaging {\n  constructor(messaging) {\n    return messaging;\n  }\n\n}\n\nconst MESSAGING_PROVIDER_NAME = 'messaging';\n\nclass MessagingInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(MESSAGING_PROVIDER_NAME);\n  }\n\n}\n\nconst messagingInstance$ = /*#__PURE__*/ /*#__PURE__*/timer(0, 300).pipe( /*#__PURE__*/concatMap(() => from(ɵgetAllInstancesOf(MESSAGING_PROVIDER_NAME))), /*#__PURE__*/distinct());\nconst PROVIDED_MESSAGING_INSTANCES = /*#__PURE__*/new InjectionToken('angularfire2.messaging-instances');\n\nfunction defaultMessagingInstanceFactory(provided, defaultApp) {\n  if (!ɵisMessagingSupportedFactory.sync()) {\n    return null;\n  }\n\n  const defaultMessaging = ɵgetDefaultInstanceOf(MESSAGING_PROVIDER_NAME, provided, defaultApp);\n  return defaultMessaging && new Messaging(defaultMessaging);\n}\n\nfunction messagingInstanceFactory(fn) {\n  return (zone, injector) => {\n    if (!ɵisMessagingSupportedFactory.sync()) {\n      return null;\n    }\n\n    const messaging = zone.runOutsideAngular(() => fn(injector));\n    return new Messaging(messaging);\n  };\n}\n\nconst MESSAGING_INSTANCES_PROVIDER = {\n  provide: MessagingInstances,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_MESSAGING_INSTANCES]]\n};\nconst DEFAULT_MESSAGING_INSTANCE_PROVIDER = {\n  provide: Messaging,\n  useFactory: defaultMessagingInstanceFactory,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_MESSAGING_INSTANCES], FirebaseApp]\n};\nlet MessagingModule = /*#__PURE__*/(() => {\n  class MessagingModule {\n    constructor() {\n      registerVersion('angularfire', VERSION.full, 'fcm');\n    }\n\n  }\n\n  MessagingModule.ɵfac = function MessagingModule_Factory(t) {\n    return new (t || MessagingModule)();\n  };\n\n  MessagingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MessagingModule\n  });\n  MessagingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_MESSAGING_INSTANCE_PROVIDER, MESSAGING_INSTANCES_PROVIDER, {\n      provide: APP_INITIALIZER,\n      useValue: ɵisMessagingSupportedFactory.async,\n      multi: true\n    }]\n  });\n  return MessagingModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction provideMessaging(fn, ...deps) {\n  return {\n    ngModule: MessagingModule,\n    providers: [{\n      provide: PROVIDED_MESSAGING_INSTANCES,\n      useFactory: messagingInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps, ...deps]\n    }]\n  };\n}\n\nconst isSupported = ɵisMessagingSupportedFactory.async; // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\nconst deleteToken = /*#__PURE__*/ɵzoneWrap(deleteToken$1, true);\nconst getMessaging = /*#__PURE__*/ɵzoneWrap(getMessaging$1, true);\nconst getToken = /*#__PURE__*/ɵzoneWrap(getToken$1, true);\nconst onMessage = /*#__PURE__*/ɵzoneWrap(onMessage$1, false);\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Messaging, MessagingInstances, MessagingModule, deleteToken, getMessaging, getToken, isSupported, messagingInstance$, onMessage, provideMessaging }; //# sourceMappingURL=angular-fire-messaging.js.map","map":null,"metadata":{},"sourceType":"module"}