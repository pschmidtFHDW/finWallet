{"ast":null,"code":"import { ɵgetAllInstancesOf, ɵisRemoteConfigSupportedFactory, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, APP_INITIALIZER, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { getValue as getValue$1, getString as getString$1, getNumber as getNumber$1, getBoolean as getBoolean$1, getAll as getAll$1 } from 'rxfire/remote-config';\nimport { activate as activate$1, ensureInitialized as ensureInitialized$1, fetchAndActivate as fetchAndActivate$1, fetchConfig as fetchConfig$1, getAll as getAll$2, getBoolean as getBoolean$2, getNumber as getNumber$2, getRemoteConfig as getRemoteConfig$1, getString as getString$2, getValue as getValue$2, setLogLevel as setLogLevel$1 } from 'firebase/remote-config';\nexport * from 'firebase/remote-config';\n\nclass RemoteConfig {\n  constructor(remoteConfig) {\n    return remoteConfig;\n  }\n\n}\n\nconst REMOTE_CONFIG_PROVIDER_NAME = 'remote-config';\n\nclass RemoteConfigInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(REMOTE_CONFIG_PROVIDER_NAME);\n  }\n\n}\n\nconst remoteConfigInstance$ = /*#__PURE__*/ /*#__PURE__*/timer(0, 300).pipe( /*#__PURE__*/concatMap(() => from(ɵgetAllInstancesOf(REMOTE_CONFIG_PROVIDER_NAME))), /*#__PURE__*/distinct());\nconst PROVIDED_REMOTE_CONFIG_INSTANCES = /*#__PURE__*/new InjectionToken('angularfire2.remote-config-instances');\n\nfunction defaultRemoteConfigInstanceFactory(provided, defaultApp) {\n  if (!ɵisRemoteConfigSupportedFactory.sync()) {\n    return null;\n  }\n\n  const defaultRemoteConfig = ɵgetDefaultInstanceOf(REMOTE_CONFIG_PROVIDER_NAME, provided, defaultApp);\n  return defaultRemoteConfig && new RemoteConfig(defaultRemoteConfig);\n}\n\nfunction remoteConfigInstanceFactory(fn) {\n  return (zone, injector) => {\n    if (!ɵisRemoteConfigSupportedFactory.sync()) {\n      return null;\n    }\n\n    const remoteConfig = zone.runOutsideAngular(() => fn(injector));\n    return new RemoteConfig(remoteConfig);\n  };\n}\n\nconst REMOTE_CONFIG_INSTANCES_PROVIDER = {\n  provide: RemoteConfigInstances,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_REMOTE_CONFIG_INSTANCES]]\n};\nconst DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER = {\n  provide: RemoteConfig,\n  useFactory: defaultRemoteConfigInstanceFactory,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_REMOTE_CONFIG_INSTANCES], FirebaseApp]\n};\nlet RemoteConfigModule = /*#__PURE__*/(() => {\n  class RemoteConfigModule {\n    constructor() {\n      registerVersion('angularfire', VERSION.full, 'rc');\n    }\n\n  }\n\n  RemoteConfigModule.ɵfac = function RemoteConfigModule_Factory(t) {\n    return new (t || RemoteConfigModule)();\n  };\n\n  RemoteConfigModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: RemoteConfigModule\n  });\n  RemoteConfigModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER, REMOTE_CONFIG_INSTANCES_PROVIDER, {\n      provide: APP_INITIALIZER,\n      useValue: ɵisRemoteConfigSupportedFactory.async,\n      multi: true\n    }]\n  });\n  return RemoteConfigModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction provideRemoteConfig(fn, ...deps) {\n  return {\n    ngModule: RemoteConfigModule,\n    providers: [{\n      provide: PROVIDED_REMOTE_CONFIG_INSTANCES,\n      useFactory: remoteConfigInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps, ...deps]\n    }]\n  };\n} // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\n\nconst getValueChanges = /*#__PURE__*/ɵzoneWrap(getValue$1, true);\nconst getStringChanges = /*#__PURE__*/ɵzoneWrap(getString$1, true);\nconst getNumberChanges = /*#__PURE__*/ɵzoneWrap(getNumber$1, true);\nconst getBooleanChanges = /*#__PURE__*/ɵzoneWrap(getBoolean$1, true);\nconst getAllChanges = /*#__PURE__*/ɵzoneWrap(getAll$1, true);\nconst isSupported = ɵisRemoteConfigSupportedFactory.async; // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\nconst activate = /*#__PURE__*/ɵzoneWrap(activate$1, true);\nconst ensureInitialized = /*#__PURE__*/ɵzoneWrap(ensureInitialized$1, true);\nconst fetchAndActivate = /*#__PURE__*/ɵzoneWrap(fetchAndActivate$1, true);\nconst fetchConfig = /*#__PURE__*/ɵzoneWrap(fetchConfig$1, true);\nconst getAll = /*#__PURE__*/ɵzoneWrap(getAll$2, true);\nconst getBoolean = /*#__PURE__*/ɵzoneWrap(getBoolean$2, true);\nconst getNumber = /*#__PURE__*/ɵzoneWrap(getNumber$2, true);\nconst getRemoteConfig = /*#__PURE__*/ɵzoneWrap(getRemoteConfig$1, true);\nconst getString = /*#__PURE__*/ɵzoneWrap(getString$2, true);\nconst getValue = /*#__PURE__*/ɵzoneWrap(getValue$2, true);\nconst setLogLevel = /*#__PURE__*/ɵzoneWrap(setLogLevel$1, true);\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RemoteConfig, RemoteConfigInstances, RemoteConfigModule, activate, ensureInitialized, fetchAndActivate, fetchConfig, getAll, getAllChanges, getBoolean, getBooleanChanges, getNumber, getNumberChanges, getRemoteConfig, getString, getStringChanges, getValue, getValueChanges, isSupported, provideRemoteConfig, remoteConfigInstance$, setLogLevel }; //# sourceMappingURL=angular-fire-remote-config.js.map","map":null,"metadata":{},"sourceType":"module"}